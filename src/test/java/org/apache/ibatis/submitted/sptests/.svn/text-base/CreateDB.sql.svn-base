drop procedure sptest.getnames if exists
go

drop procedure sptest.getname if exists
go

drop procedure sptest.adder if exists
go

drop procedure sptest.arraytest if exists
go

drop table sptest.names if exists
go

drop table sptest.items if exists
go

drop schema sptest if exists
go

create schema sptest
go

create procedure sptest.adder(in addend1 integer, in addend2 integer, out theSum integer)
begin atomic
  set theSum = addend1 + addend2; 
end
go

create table sptest.names (
  id integer generated by default as identity not null,
  first_name varchar(20),
  last_name varchar(20),
  primary key(id)
)
go

insert into sptest.names (first_name, last_name) values('Fred', 'Flintstone')
go

insert into sptest.names (first_name, last_name) values('Wilma', 'Flintstone')
go

insert into sptest.names (first_name, last_name) values('Barney', 'Rubble')
go

insert into sptest.names (first_name, last_name) values('Betty', 'Rubble')
go

create table sptest.items (
  id integer generated by default as identity not null,
  item varchar(20),
  primary key(id)
)
go

insert into sptest.items (item) values('Brontosaurus Burger')
go

insert into sptest.items (item) values('Lunch Box')
go

insert into sptest.items (item) values('Helmet')
go

-- note that these create procedure statements will fail until hsqldb 2.0.1
create procedure sptest.getname(in nameId integer)
reads sql data
dynamic result sets 1
BEGIN ATOMIC
  declare cur cursor for select * from sptest.names where id = nameId;
  open cur;
END
go

create procedure sptest.getnamesanditems()
reads sql data
dynamic result sets 2
BEGIN ATOMIC
  declare cur1 cursor for select * from sptest.names;
  declare cur2 cursor for select * from sptest.items;
  open cur1;
  open cur2;
END
go

create procedure sptest.getnames(in lowestId int, out totalrows integer)
reads sql data
dynamic result sets 1
BEGIN ATOMIC
  declare cur cursor for select * from sptest.names where id >= lowestId;
  select count(*) into totalrows from sptest.names where id >= lowestId;
  open cur;
END
go

create procedure sptest.arraytest(in ids int array, out rowsrequested integer, out returnedids int array)
reads sql data
dynamic result sets 1
begin atomic
  declare cur cursor for select * from sptest.names where id in (unnest(ids));
  set rowsrequested = cardinality(ids);
  set returnedids = array [7, 8, 9, 10];
  open cur;
end
go
